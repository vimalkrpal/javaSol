import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;

public class JohnCalculator {

	public static BufferedReader buf = new BufferedReader(new InputStreamReader(System.in));
	public static int st = 48;
	public static int ed = 57;
	public static List<String> oprts = Arrays.asList("+","-","*","/","^","(",")");
	public static Stack<String> stack=null;
	public static Stack<Integer> bracOp=null;
	public static int combined=0;
	public static void main(String[] args) throws Exception {
		//String e="7+((10*5^2)+(7)+(1))";
		int loop=Integer.parseInt(buf.readLine());
		List<String> qns=new ArrayList<>(loop);
		while(loop-->0) {
			qns.add(buf.readLine());
		}
		for(int i=0;i<qns.size();i++) {
			soln(qns.get(i),i+1);
		}
	}
	public static void soln(String e,int caseno) {
		stack=new Stack<>();
		bracOp=new Stack<>();
		combined=0;
		if(!Help.checkBracNdOp(e)) {
			System.out.println("Case #"+caseno+": "+"INVALID EXPRESSION");
			return;
		}
		for(int i=0;i<e.length();i++) {
			if(!push(e.charAt(i)+"",i)) {
				System.out.println("Case #"+caseno+": "+"INVALID EXPRESSION");
				return;
			}
		}
		List<String> fs=new ArrayList<>(stack.size());
		for(int i=0;i<stack.size();i++) {
			fs.add(stack.get(i));
		}
		String res=Help.solveBrac(fs);
		if(res==null) {
			System.out.println("Case #"+caseno+": "+"INVALID EXPRESSION");
		}
		else {
			System.out.println("Case #"+caseno+": "+res);	
		}
		
	}
	public static boolean push(String c,int pos) {
		if(c.equals(")")) {
			int bracop=bracOp.pop();
			List<String> tmp=new ArrayList<>(pos-bracop);
			int remd=0;
			int end=pos-combined;
			end=stack.size();
			int combex=0;
			for(int i=bracop+1;i<end;i++) {
				String el=stack.remove(i-remd++);
				tmp.add(el);
				combex+=el.length();
			}
			stack.pop();
			String res=Help.solveBrac(tmp);
			if(res!=null) {
				combined+=(combex+1);
				stack.push(res);
			}
			if(res==null) {
				return false;
			}
		}
		if(c.equals("(")) {
			bracOp.push(pos-combined);
		}
		if(!oprts.contains(c)) {
			String t="";
			if(!stack.isEmpty() && !oprts.contains(stack.peek()))
			{
				t=stack.pop();
				//combined++;
			}
			t+=c;
			stack.push(t);
		}
		else if(!c.equals(")")){
			stack.push(c);
		}
		return true;
	}
	
}
